plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version "3.3"
}

group = 'com.study'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    jacoco {
        // 아래 설정들은 모두 기본 값. 따라서 변경할 것이 없다면 적어주지 않아도 됨
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.5'
    // reportsDir = ${project.reporting.baseDir}/jacoco - 따로 설정해주지 않을 경우 기본 경로
}

jacocoTestReport {
    reports {
        html.enabled true // Html 만들어 - 로컬에서 쉽게 보기 위함
        xml.enabled true  // xml을 만들어 - 소나큐브 연동을 위함
        csv.enabled false

//        xml.destination file("${buildDir}/jacoco/result.xml") // 여기 저장
    }
    // 코드 커버리지 기준을 만족해야지 build 성공
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true // 이 Rule을 적용
            element = "CLASS" // class 단위로

            // 브랜치 커버리지 최소 50%
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.50
            }

            // 라인 커버리지 최소 80%
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.00
            }

            // 빈 줄을 제외한 코드의 라인 수 최대 300라인
            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                minimum = 0
            }

            // 커버리지 체크를 제외할 클래스들
            excludes = []
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "dropthecode"
        property "sonar.host.url", "http://127.0.0.1:9000"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml" // jacoco xml 파일 위치
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.exclusions", "**/util/**, **/support/**, **/dto/**" // 제외할 클래스들
    }
}