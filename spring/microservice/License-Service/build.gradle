plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
//    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
}

group = 'com.optimagrowth'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "2021.0.3")
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-parent:2.7.3'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'

//    implementation 'org.springframework.boot:spring-boot-starter-amqp'
//    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
//    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
//    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.boot:spring-boot-starter-websocket'
//    implementation 'org.apache.kafka:kafka-streams'
//    implementation 'org.springframework.cloud:spring-cloud-bus'
//    implementation 'org.springframework.cloud:spring-cloud-config-server'
//    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
//    implementation 'org.springframework.cloud:spring-cloud-starter'
//    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
//    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
//    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
//    implementation 'org.springframework.cloud:spring-cloud-stream'
//    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
//    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
//    implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
//    implementation 'org.springframework.kafka:spring-kafka'
//    runtimeOnly 'com.h2database:h2'
//    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
//    runtimeOnly 'mysql:mysql-connector-java'
//    testImplementation 'io.projectreactor:reactor-test'
//    testImplementation 'org.springframework.amqp:spring-rabbit-test'
//    testImplementation 'org.springframework.kafka:spring-kafka-test'
//    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
//    testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
//    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}

//tasks.named('asciidoctor') {
//    inputs.dir snippetsDir
//    dependsOn test
//}
